version: '3.9'

networks:
  app-network:
    driver: bridge

services:
  app:
    build:
      context: ./
      dockerfile: ./Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src
    networks:
      - app-network
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

#  kafka-init-topics:
#    image: bitnami/kafka:latest
#    depends_on:
#      kafka:
#        condition: service_healthy
#    entrypoint: >
#      sh -c "
#        kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic events.notifications --partitions 3 --replication-factor 1
#      "
#    networks:
#      - app-network
